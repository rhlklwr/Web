import { QueryClient, QueryClientProvider, useQuery } from 'react-query'

const queryClient = new QueryClient()

export default function App() {
   return (
     <QueryClientProvider client={queryClient}>
       <Example />
     </QueryClientProvider>
   )
}


import {  QueryClient, QueryClientProvider, useQuery } from 'react-query';
const queryClient = new QueryClient();
const fetchPanets = async () => {
    const result = await fetch('https://swapi.dev/api/people')
    return result.json()
}

const Planets = () => {
    const { data, status } = useQuery('Planets', fetchPanets)
    console.log("data", data, "status", status)
    return (
        <div>
            <h2>Planets</h2>
        </div>
    );
}


export default function Wraped(){
return(<QueryClientProvider client={queryClient}>
        <Planets/>
    </QueryClientProvider>
);
    
}

status - it will show status such as success, loading, error
react-query will try to fetch 3 times before making status from loading to error

// setting CONFIG
const { data, status } = useQuery('planets', fetchPlanets, {
        staleTime: 2000,
    });


// first one is key and all other in array is query params

const { data, status } = useQuery(['planets', 'hello'], fetchPlanets, {
        staleTime: 2000,
    });
