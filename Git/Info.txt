git --version
git config --global user.name
git config --global user.email

git config --list

git help config
git config --help

git init
rm -rf .git

git status

touch .gitignore

git add -A or git add .

git reset

git commit -m

git log
git log --stat

git clone <url>

git remote -v
git branch -a

git diff

git pull origin master
git push origin master

git remote remove origin

git branch
git branch <branch name>
git checkout <branch name>

git push -u origin <branch name>
git branch -a

git checkout master

git pull origin master

# to check if branch is merged or not
git branch --merged
git branch --no-merged   

git merge <branch name>

git push origin master

git branch -d <branch name>

git push origin --delete <branch name>

git checkout <file/Directory name>   #To Undo changes before commit

git commit --amend -m   # To update message without adding more commit

Git Cherry Pick

git log   # to copy the hash of commit from source branch
git checkout <dest branch name>
git cherry-pick <hash>

To Reset previous commit

3 Diffrent type of Reset (git reset soft, git reset mixed(default), git reset hard)

git log     # to copy the hash of commit you want to go

git reset --soft <hash>  # It reset the previous commit but keep the changes in staging area
git reset <hash>            # It will keep the changes but not in staging area instead of working file/Directory
git reset --hard <hash>     # It will remove all the tracked file but it will leave untracked file
git clean -df               # To get rid of untracked file

git reset HEAD~2


git reflog       # To get back commit delete by Hard reset
git checkout <hash>      # To go again to commit
git branch <name>


git revert <hash>       #Create new commit to revert the affect
git diff <hash> <hash>


Git Stash

git branch <name>
git checkout <name>
git diff

git stash save "message here"
git stash list

git stash apply <stash from list>       # It will not remove stash from list

git stash pop           #It will apply 1st stash from list and drop 

git stash drop <stash from list>        #To discard stash
git stash clear     #It will remove everything from stash


Git add

git add -A or git add --all     #It will stage all changes in entire working tree
git add -u or git add --update  #It will add all modified and updated file but not untracked file


Remove existing origin and add new origin to your project directory
>$ git remote show origin
>$ git remote rm origin
>$ git add .
>$ git commit -m "First commit"
>$ git remote add origin Copied_origin_url
>$ git remote show origin
>$ git push origin master


git merge and rebase

git merge --squash <branch>  #It will allow to summarise all the commit from current branch to new branch


use git merge to add other branch changes to main branch
>go to main branch
git merge <your feature branch>

Using git rebase
>go to feature branch

git rebase <main branch>

https://hackernoon.com/git-merge-vs-rebase-whats-the-diff-76413c117333

In summary, when looking to incorporate changes from one Git branch into another:
Use merge in cases where you want a set of commits to be clearly grouped together in history.
Use rebase when you want to keep a linear commit history.
DON'T use rebase on a public/shared branch.


