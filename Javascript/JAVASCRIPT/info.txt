JAVASCRIPT types
1. Number
2. String
3. Boolean
4. Undefined
5. Null
6. Symbol - var sym1 = Symbol()
7. Object

Comparisons
!==
=== it will check types
== it will ignore type
>=
<=
>
<

Variable
var - Global scope
let - Block scope
const

`Hello ${name} good ${variable}`


Conditionals
if
else
else if
ternary operator (confition ? true : false)
switch
{
	switch variable {
		case 1:
			something;
			break;
		case 2:
			something;
			break;
		default:
			something;
			break;
	}
}
Logical operator
&&
||
!

Functions
var a = function name() {}
function name() {}
return
()

arrow Functions = 
const a = (a,b) => a+b 

const a = (a,b) => {
	return a+b}

Data structure
Array
Object

let {new, old} = obj
Object{
	a,
	b,
	c,
}



Looping
for
while
do
forEach - forEach(myFunction)

NaN - not a Number
prompt()
alert()
console.log()


DOM Selectors
--------------
getElementsByTagName
getElementsByClassName
getElementById

querySelector
querySelectorAll

getAttribute
setAttribute

##Changing Styles
style.{property} //ok

className //best
classList //best

classList.add
classList.remove
classList.toggle

##Bonus
innerHTML //DANGEROUS

parentElement
children

##It is important to CACHE selectors in variables

var button = document.getElementsByTagName("button")[0]

button.addEventListener("click", function() {
    console.log("Click");
})

var button = document.getElementById("enter");
var input = document.getElementById("userinput");
var ul = document.querySelector("ul");

function inputLength() {
	return input.value.length;
}

function createListElement() {
	var li = document.createElement("li");
	li.appendChild(document.createTextNode(input.value));
	ul.appendChild(li);
	input.value = "";
}

function addListAfterClick() {
	if (inputLength() > 0) {
		createListElement();
	}
}

function addListAfterKeypress(event) {
	if (inputLength() > 0 && event.keyCode === 13) {
		createListElement();
	}
}

button.addEventListener("click", addListAfterClick);

input.addEventListener("keypress", addListAfterKeypress);


Advance Functions - 

#Clousres
const first = () =>{
	const greet = "Hi";
	const second = () => {
		alert(greet);
	}
	return second;
}

const newFunc = first();
newFunc()

#Currying
const multiply = (a,b) => a* b;
const curryingMultiply = (a) => (b) => a*b;

#Compose
const compose = (f, g) => (a) => f(g(a));

const sum = (num) => num +1;

compose(sum, sum)(5);

(sum+1) +1 // answer will be 7

// Avoiding side effect, function purity


Advance Array -
map, filter, reduce

const mapArray = array.map(num => num+1);
const mapArray = array.map((num )=> {return num+1}); same as above

reduce - 
const reduceArray = array.reduce((accumulator, num) => {
	return accumulator + num
}, 0) #0 is default value


Advance Object - 

reference type - 
premetive type = 1, number
refrence type = list, object

context vs scope - 

scope is like function, inside curly bracket there is new scope

context - 
this - object enviornment, on starting consloe "this" is same as window

const object = {
	a : function() {
		consloe.log(this)
	}
}
now "this" will be object

Instantiation - 

class Player{
	constructor(name, type) {
		this.name = name;
		this.type = type;
	}
	introduce() {
		console.log("ok")
	}
}

class Wizard extends Player {
	constructor(name, type) {
		super(name, type)
	}

	play() {
		consloe.log(`something ${this.type}`)
	}
}

const wizard1 = new Wizard("Rahul", "killer")
const wizard2 = new Wizard("Rahul", "no power")

Type Coercion
